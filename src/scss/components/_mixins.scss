@mixin main {
	html {
		scroll-behavior: smooth;
		box-sizing: border-box;
		font-family: $main_font, $secondary_font, Verdana, Geneva, Tahoma,
			sans-serif;
	}

	*,
	*:before,
	*:after {
		box-sizing: inherit;
		padding: 0;
		margin: 0;
	}

	ul,
	ol {
		list-style: none;
	}

	a {
		text-decoration: none;
	}
}

// responsive fonts
@function strip-unit($value) {
	@return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);

	@if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
		& {
			font-size: $min-font-size;
			@media screen and (min-width: $min-vw) {
				font-size: calc(
					#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
						((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
				);
			}
			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}
		}
	}
}

// media queries
@mixin breakpoint-min($point) {
	@media (min-width: #{$point}px) {
		@content;
	}
}

@mixin breakpoint-max($point) {
	@media (max-width: #{$point}px) {
		@content;
	}
}

@mixin breakpoint-min-max($point-min, $point-max) {
	@media (min-width: #{$point-min}px) and (max-width: #{$point-max}px) {
		@content;
	}
}

// clearfix
@mixin clearfix {
	&:before,
	&:after {
		content: '';
		display: table;
	}
	&:after {
		clear: both;
	}
}

@mixin css3-prefix($prop, $value) {
	-webkit-#{$prop}: #{$value};
	-moz-#{$prop}: #{$value};
	-ms-#{$prop}: #{$value};
	-o-#{$prop}: #{$value};
	#{$prop}: #{$value};
}

@mixin font-face($name, $file) {
	@font-face {
		font-family: '#{$name}';
		src: url('../fonts/#{$file}.eot');
		src: url('../fonts/#{$file}.eot?#iefix') format('embedded-opentype'),
			url('../fonts/#{$file}.woff') format('woff'),
			url('../fonts/#{$file}.ttf') format('truetype'),
			url('../fonts/#{$file}.svg?#webfont') format('svg');
	}
}

@mixin btn {
	cursor: pointer;
	margin-left: 5px;
	margin-bottom: 15px;
	text-shadow: 0 -1px 0 darken($secondary_clr, 40%),
		0 1px 1px lighten($secondary_clr, 40%);
	box-sizing: border-box;
	font-size: 1vw;
	text-decoration: none;
	font-weight: bold;
	color: $primary_clr;
	&:visited {
		color: $text-color;
	}
	line-height: $height + px;
	padding: 0 (($height/2) + px);
	display: inline-block;
	background: linear-gradient(
		to bottom,
		saturate(lighten($secondary_clr, 15%), 35%) 0%,
		saturate(lighten($secondary_clr, 12%), 15%) 26%,
		$secondary_clr 100%
	);
	border-radius: 5px;
	border-top: 1px solid lighten($color, 22%);
	border-bottom: 1px solid lighten($color, 20%);
	top: 0;
	transition: all ($button-speed + s) $timing-function;
	position: relative;
}
.btn:hover {
	background: linear-gradient(
		to bottom,
		lighten(saturate(lighten($secondary_clr, 15%), 55%), $lighten-on-hover) 0%,
		lighten(saturate(lighten($secondary_clr, 12%), 35%), $lighten-on-hover) 26%,
		lighten($secondary_clr, $lighten-on-hover) 100%
	);
}
.btn:active {
	top: $depth + px;
	text-shadow: 0 -2px 0 darken($color, 0%), 0 1px 1px lighten($color, 20%),
		0 0 4px white;
	color: lighten($secondary_clr, 45%);
	&:before {
		top: 0;
		box-shadow: 0 3px 3px rgba(0, 0, 0, 0.7), 0 3px 9px rgba(0, 0, 0, 0.2);
	}
}
.btn:before {
	display: inline-block;
	content: '';
	position: absolute;
	left: 0;
	right: 0;
	z-index: -1;
	top: ($depth) + px;
	border-radius: 5px;
	height: ($height) + px;
	background: linear-gradient(
		to top,
		saturate(darken($secondary_clr, 40%), 15%) 0%,
		saturate(darken($secondary_clr, 25%), 10%) $depth + px
	);
	transition: all (($button-speed * 1.3) + s) $timing-function;
	box-shadow: 0 1px 0 2px rgba(0, 0, 0, 0.3),
		0 5px ($depth * 0.4 + px) rgba(0, 0, 0, 0.5),
		0 ($depth * 1.8 + px) 9px rgba(0, 0, 0, 0.2);
}

@mixin easeOut {
	transition: all 0.8s ease-out;
}

@mixin fixedFooter {
	min-height: calc(100vh - 60px);
}

@mixin background($image) {
	@if $show-image {
		background: #{$image};
		background-attachment: fixed;
		background-size: cover;
		background-position: center;

		&:before {
			content: '';
			position: fixed;
			top: 0;
			right: 0;
			width: 100%;
			height: 100%;
			background: rgba($primary_clr, $background-opacity);
			z-index: -100;
		}
	}
}

@mixin wrapper($max-width, $padding) {
	max-width: #{$max-width}px;
	margin: 0 auto;
	padding: 0 #{$padding}px;
}
